# Generated from lib/wardite.rb with RBS::Inline

module Wardite
  module Evaluator
    extend Wardite::ValueHelper
  end
end

module Wardite
  class Instance
    attr_accessor version: Integer

    attr_accessor sections: Array[Section]

    attr_accessor runtime: Runtime

    attr_accessor types: Array[Type]

    attr_accessor store: Store

    attr_accessor exports: Exports

    attr_reader import_object: Hash[Symbol, Hash[Symbol, wasmCallable]]

    # @rbs import_object: Hash[Symbol, Hash[Symbol, wasmCallable]]
    # @rbs &blk: (Instance) -> void
    def initialize: (Hash[Symbol, Hash[Symbol, wasmCallable]] import_object) { (Instance) -> void } -> untyped

    # @rbs return: ImportSection
    def import_section: () -> ImportSection

    # @rbs return: TypeSection|nil
    def type_section: () -> (TypeSection | nil)

    # @rbs return: MemorySection|nil
    def memory_section: () -> (MemorySection | nil)

    # @rbs return: StartSection|nil
    def start_section: () -> (StartSection | nil)

    # @rbs return: GlobalSection|nil
    def global_section: () -> (GlobalSection | nil)

    # @rbs return: DataSection|nil
    def data_section: () -> (DataSection | nil)

    # @rbs return: FunctionSection|nil
    def function_section: () -> (FunctionSection | nil)

    # @rbs return: TableSection?
    def table_section: () -> TableSection?

    # @rbs return: ElemSection?
    def elem_section: () -> ElemSection?

    # @rbs return: CodeSection|nil
    def code_section: () -> (CodeSection | nil)

    # @rbs return: ExportSection
    def export_section: () -> ExportSection
  end

  class Runtime
    include ValueHelper

    # TODO: add types of class that the stack accomodates
    attr_accessor stack: Array[wasmValue]

    attr_accessor call_stack: Array[Frame]

    attr_reader instance: Instance

    # @rbs inst: Instance
    def initialize: (Instance inst) -> untyped

    # @rbs return: void
    def invoke_start_section: () -> void

    # @rbs name: String|Symbol
    # @rbs return: bool
    def callable?: (String | Symbol name) -> bool

    # @rbs name: String|Symbol
    # @rbs args: Array[Object]
    # @rbs return: Object|nil
    def call: (String | Symbol name, Array[Object] args) -> (Object | nil)

    # @rbs idx: Integer
    # @rbs return: void
    def call_by_index: (Integer idx) -> void

    # @rbs wasm_function: WasmFunction
    # @rbs return: void
    def push_frame: (WasmFunction wasm_function) -> void

    # @rbs wasm_function: WasmFunction
    # @rbs return: Object|nil
    def invoke_internal: (WasmFunction wasm_function) -> (Object | nil)

    # @rbs external_function: ExternalFunction
    # @rbs return: wasmValue|nil
    def invoke_external: (ExternalFunction external_function) -> (wasmValue | nil)

    # @rbs return: void
    def execute!: () -> void

    # @rbs frame: Frame
    # @rbs insn: Op
    # @rbs return: void
    def eval_insn: (Frame frame, Op insn) -> void

    # @rbs ops: Array[Op]
    # @rbs pc_start: Integer
    # @rbs return: Integer
    def fetch_ops_while_else_or_end: (Array[Op] ops, Integer pc_start) -> Integer

    # @rbs labels: Array[Label]
    # @rbs stack: Array[wasmValue]
    # @rbs level: Integer
    # @rbs return: Integer
    def do_branch: (Array[Label] labels, Array[wasmValue] stack, Integer level) -> Integer

    # @rbs ops: Array[Op]
    # @rbs pc_start: Integer
    # @rbs return: Integer
    def fetch_ops_while_end: (Array[Op] ops, Integer pc_start) -> Integer

    # unwind the stack and put return value if exists
    # @rbs sp: Integer
    # @rbs arity: Integer
    # @rbs return: void
    def stack_unwind: (Integer sp, Integer arity) -> void

    # @rbs finish: Integer
    # @rbs return: Array[wasmValue]
    def drained_stack: (Integer finish) -> Array[wasmValue]

    # @rbs name: Symbol
    # @rbs args: Array[Object]
    # @rbs return: untyped
    def method_missing: (Symbol name, *untyped args) -> untyped

    # @rbs name: String|Symbol
    # @rbs return: bool
    def respond_to?: (String | Symbol name) -> bool
  end

  class Type
    attr_accessor callsig: Array[Symbol]

    attr_accessor retsig: Array[Symbol]

    # @rbs callsig: Array[Symbol]
    # @rbs retsig: Array[Symbol]
    # @rbs returb: void
    def initialize: (Array[Symbol] callsig, Array[Symbol] retsig) -> untyped
  end

  class Frame
    attr_accessor pc: Integer

    attr_accessor sp: Integer

    attr_accessor body: Array[Op]

    attr_accessor arity: Integer

    attr_accessor labels: Array[Label]

    attr_accessor locals: Array[wasmValue]

    # @rbs pc: Integer
    # @rbs sp: Integer
    # @rbs body: Array[Op]
    # @rbs arity: Integer
    # @rbs locals: Array[wasmValue]
    # @rbs returb: void
    def initialize: (Integer pc, Integer sp, Array[Op] body, Integer arity, Array[wasmValue] locals) -> untyped
  end

  class Label
    attr_accessor kind: :if | :loop | :block

    attr_accessor pc: Integer

    attr_accessor sp: Integer

    attr_accessor arity: Integer

    attr_accessor start: Integer | nil

    # @rbs kind: (:if|:loop|:block)
    # @rbs pc: Integer
    # @rbs sp: Integer
    # @rbs arity: Integer
    # @rbs start: Integer|nil
    # @rbs return: void
    def initialize: (:if | :loop | :block kind, Integer pc, Integer sp, Integer arity, ?Integer | nil start) -> void
  end

  class Store
    attr_accessor funcs: Array[WasmFunction | ExternalFunction]

    attr_accessor memories: Array[Memory]

    attr_accessor globals: Array[Global]

    attr_accessor tables: Array[Table]

    attr_accessor elements: Array[[ Symbol, Integer, Array[Integer] ]]

    # @rbs inst: Instance
    # @rbs return: void
    def initialize: (Instance inst) -> void

    # @rbs idx: Integer
    def []: (Integer idx) -> untyped
  end

  class Memory
    attr_accessor data: String

    attr_accessor current: Integer

    attr_accessor max: Integer | nil

    # @rbs min: Integer
    # @rbs max: Integer|nil
    # @rbs return: void
    def initialize: (Integer min, Integer | nil max) -> void

    # @rbs delta: Integer
    # @rbs return: Integer
    def grow: (Integer delta) -> Integer

    def inspect: () -> untyped
  end

  class Table
    attr_accessor type: Symbol

    attr_accessor current: Integer

    attr_accessor max: Integer | nil

    attr_accessor refs: Array[WasmFunction | ExternalFunction | nil]

    # @rbs type: Symbol
    # @rbs init: Integer
    # @rbs max: Integer|nil
    # @rbs return: void
    def initialize: (Symbol type, Integer init, Integer | nil max) -> void

    # @rbs idx: Integer
    # @rbs elem: WasmFunction|ExternalFunction|nil
    # @rbs return: void
    def set: (Integer idx, WasmFunction | ExternalFunction | nil elem) -> void
  end

  class Global
    attr_accessor type: Symbol

    attr_accessor mutable: bool

    # TODO: unused in wasm 1.0 spec?
    attr_accessor shared: bool

    attr_accessor value: wasmValue

    # @rbs &blk: (Global) -> void
    # @rbs return: void
    def initialize: () { (Global) -> void } -> void

    alias mutable? mutable

    alias shared? shared
  end

  class WasmData
    attr_accessor memory_index: Integer

    attr_accessor offset: Integer

    attr_accessor init: String

    # @rbs &blk: (WasmData) -> void
    # @rbs return: void
    def initialize: () { (WasmData) -> void } -> void
  end

  class Block
    VOID: nil

    attr_accessor block_types: nil | Array[Integer]

    # @rbs return: Block
    def self.void: () -> Block

    # @rbs block_types: nil|Array[Integer]
    # @rbs return: void
    def initialize: (?nil | Array[Integer] block_types) -> void

    # @rbs return: bool
    def void?: () -> bool

    # @rbs return: Integer
    def result_size: () -> Integer
  end

  class Exports
    attr_accessor mappings: Hash[String, [ Integer, WasmFunction | ExternalFunction ]]

    # @rbs export_section: ExportSection
    # @rbs store: Store
    # @rbs return: void
    def initialize: (ExportSection export_section, Store store) -> void

    # @rbs name: String
    # @rbs return: [Integer, WasmFunction|ExternalFunction]
    def []: (String name) -> [ Integer, WasmFunction | ExternalFunction ]
  end

  # TODO: common interface btw. WasmFunction and ExternalFunction?
  class WasmFunction
    attr_accessor callsig: Array[Symbol]

    attr_accessor retsig: Array[Symbol]

    attr_accessor code_body: CodeSection::CodeBody

    # @rbs callsig: Array[Symbol]
    # @rbs retsig: Array[Symbol]
    # @rbs code_body: CodeSection::CodeBody
    # @rbs return: void
    def initialize: (Array[Symbol] callsig, Array[Symbol] retsig, CodeSection::CodeBody code_body) -> void

    # @rbs return: Array[Op]
    def body: () -> Array[Op]

    # @rbs return: Array[Symbol]
    def locals_type: () -> Array[Symbol]

    # @rbs return: Array[Integer]
    def locals_count: () -> Array[Integer]

    # @rbs override_type: Type?
    # @rbs return: WasmFunction
    def clone: (?override_type: Type?) -> WasmFunction
  end

  type wasmFuncReturn = Object | nil

  type wasmCallable = ^(Store, Array[wasmValue]) -> wasmFuncReturn

  class ExternalFunction
    attr_accessor callsig: Array[Symbol]

    attr_accessor retsig: Array[Symbol]

    attr_accessor callable: wasmCallable

    # @rbs callsig: Array[Symbol]
    # @rbs retsig: Array[Symbol]
    # @rbs callable: wasmCallable
    # @rbs return: void
    def initialize: (Array[Symbol] callsig, Array[Symbol] retsig, wasmCallable callable) -> void

    # @rbs override_type: Type?
    # @rbs return: ExternalFunction
    def clone: (?override_type: Type?) -> ExternalFunction
  end

  class GenericError < StandardError
  end

  class LoadError < StandardError
  end

  class ArgumentError < StandardError
  end

  class EvalError < StandardError
  end

  class Unreachable < StandardError
  end

  # @rbs path: String|nil
  # @rbs buffer: File|StringIO|nil
  # @rbs **options: Hash[Symbol, Object]
  # @rbs return: Instance
  def self.new: (?path: String | nil, ?buffer: File | StringIO | nil, **Hash[Symbol, Object] options) -> Instance
end

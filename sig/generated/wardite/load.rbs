# Generated from lib/wardite/load.rb with RBS::Inline

# rbs_inline: enabled
module Wardite
  class Section
    attr_accessor name: String

    attr_accessor code: Integer

    attr_accessor size: Integer
  end

  class TypeSection < Section
    attr_accessor defined_types: Array[Array[Symbol]]

    attr_accessor defined_results: Array[Array[Symbol]]

    # @rbs return: void
    def initialize: () -> void
  end

  class FunctionSection < Section
    attr_accessor func_indices: Array[Integer]

    # @rbs return: void
    def initialize: () -> void
  end

  class MemorySection < Section
    attr_accessor limits: Array[[ Integer, Integer | nil ]]

    # @rbs return: void
    def initialize: () -> void
  end

  class GlobalSection < Section
    class Global
      attr_accessor type: Symbol

      attr_accessor mutable: bool

      # TODO: unused in wasm 1.0 spec?
      attr_accessor shared: bool

      attr_accessor value: I32 | I64 | F32 | F64

      # @rbs &blk: (Global) -> void
      # @rbs return: void
      def initialize: () { (Global) -> void } -> void
    end

    attr_accessor globals: Array[Global]

    # @rbs return: void
    def initialize: () -> void
  end

  class CodeSection < Section
    class CodeBody
      attr_accessor locals_count: Array[Integer]

      attr_accessor locals_type: Array[Symbol]

      attr_accessor body: Array[Op]

      # @rbs &blk: (CodeBody) -> void
      # @rbs return: void
      def initialize: () { (CodeBody) -> void } -> void
    end

    attr_accessor func_codes: Array[CodeBody]

    # @rbs return: void
    def initialize: () -> void
  end

  class DataSection < Section
    class Segment
      attr_accessor flags: Integer

      attr_accessor offset: Integer

      attr_accessor data: String

      # @rbs &blk: (Segment) -> void
      # @rbs return: void
      def initialize: () { (Segment) -> void } -> void
    end

    attr_accessor segments: Array[Segment]

    # @rbs return: void
    def initialize: () -> void
  end

  class ExportSection < Section
    class ExportDesc
      attr_accessor name: String

      attr_accessor kind: Integer

      attr_accessor func_index: Integer
    end

    attr_accessor exports: Hash[String, ExportDesc]

    def initialize: () -> void

    # @rbs &blk: (ExportDesc) -> void
    def add_desc: () { (ExportDesc) -> void } -> untyped
  end

  class ImportSection < Section
    class ImportDesc
      attr_accessor module_name: String

      attr_accessor name: String

      attr_accessor kind: Integer

      attr_accessor sig_index: Integer
    end

    attr_accessor imports: Array[ImportDesc]

    def initialize: () -> void

    # @rbs &blk: (ImportDesc) -> void
    def add_desc: () { (ImportDesc) -> void } -> untyped
  end

  module BinaryLoader
    extend Wardite::Leb128Helper

    extend Wardite::ValueHelper

    # @rbs buf: File|StringIO
    # @rbs import_object: Hash[Symbol, Hash[Symbol, Proc]]
    # @rbs enable_wasi: boolish
    # @rbs return: Instance
    def self.load_from_buffer: (File | StringIO buf, ?import_object: Hash[Symbol, Hash[Symbol, Proc]], ?enable_wasi: boolish) -> Instance

    # @rbs return: Integer
    def self.preamble: () -> Integer

    # @rbs return: Array[Section]
    def self.sections: () -> Array[Section]

    # @rbs return: TypeSection
    def self.type_section: () -> TypeSection

    # @rbs return: ImportSection
    def self.import_section: () -> ImportSection

    # @rbs return: MemorySection
    def self.memory_section: () -> MemorySection

    # @rbs return: GlobalSection
    def self.global_section: () -> GlobalSection

    # @rbs return: FunctionSection
    def self.function_section: () -> FunctionSection

    # @rbs return: CodeSection
    def self.code_section: () -> CodeSection

    # @rbs buf: StringIO
    # @rbs return: Array[::Wardite::Op]
    def self.code_body: (StringIO buf) -> Array[::Wardite::Op]

    # @rbs return: DataSection
    def self.data_section: () -> DataSection

    # @rbs sbuf: StringIO
    # @rbs return: String
    def self.fetch_insn_while_end: (StringIO sbuf) -> String

    # @rbs ops: Array[Op]
    # @rbs return: Integer
    def self.decode_expr: (Array[Op] ops) -> Integer

    # @rbs ops: Array[Op]
    # @rbs return: I32|I64|F32|F64
    def self.decode_global_expr: (Array[Op] ops) -> (I32 | I64 | F32 | F64)

    # @rbs return: ExportSection
    def self.export_section: () -> ExportSection

    # @rbs code: Integer
    # @rbs return: nil
    def self.unimplemented_skip_section: (Integer code) -> nil

    # @rbs sbuf: StringIO
    # @rbs n: Integer
    # @rbs return: String
    def self.assert_read: (StringIO sbuf, Integer n) -> String
  end
end

# Generated from lib/wardite/value.rb with RBS::Inline

module Wardite
  type wasmValue = I32 | I64 | F32 | F64

  module ValueHelper
    # @rbs value: Integer
    # @rbs return: I32
    def I32: (Integer value) -> I32

    # @rbs value: Integer
    # @rbs return: I64
    def I64: (Integer value) -> I64

    # @rbs value: Float
    # @rbs return: F32
    def F32: (Float value) -> F32

    # @rbs value: Float
    # @rbs return: F64
    def F64: (Float value) -> F64

    private

    # @rbs value: Integer
    # @rbs return: Integer
    def as_u32: (Integer value) -> Integer

    # @rbs value: Integer
    # @rbs return: Integer
    def as_u64: (Integer value) -> Integer
  end

  extend ValueHelper

  class I32
    include ValueHelper

    I32_MAX: Integer

    # value should be stored as unsigned Integer, even in I32/I64
    # when we want to access signed value, it'd be done via #value_s
    attr_accessor value: Integer

    # @rbs str: String
    # @rbs size: Integer|nil
    # @rbs signed: bool
    # @rbs return: I32
    def self.from_bytes: (String str, ?size: Integer | nil, ?signed: bool) -> I32

    # @rbs return: Integer
    def memsize: () -> Integer

    # returns a value interpreted as signed integer
    # @rbs return: Integer
    def value_s: () -> Integer

    # TODO: eliminate use of pack, to support mruby - in this file!
    # @rbs size: Integer|nil
    # @rbs return: String
    def packed: (?size: Integer | nil) -> String

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def wrap: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def demote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def promote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def reinterpret: (to: Symbol) -> wasmValue

    # @rbs from: Symbol
    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extendN_s: (from: Symbol, to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_s: (to: Symbol) -> wasmValue

    # I32#inspect shows signed value for convinience
    def inspect: () -> untyped
  end

  class I64
    include ValueHelper

    I64_MAX: Integer

    attr_accessor value: Integer

    # @rbs str: String
    # @rbs size: Integer|nil
    # @rbs signed: bool
    # @rbs return: I64
    def self.from_bytes: (String str, ?size: Integer | nil, ?signed: bool) -> I64

    # @rbs return: Integer
    def memsize: () -> Integer

    # returns a value interpreted as signed integer
    # @rbs return: Integer
    def value_s: () -> Integer

    # @rbs size: Integer|nil
    # @rbs return: String
    def packed: (?size: Integer | nil) -> String

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def wrap: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def demote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def promote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def reinterpret: (to: Symbol) -> wasmValue

    # @rbs from: Symbol
    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extendN_s: (from: Symbol, to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_s: (to: Symbol) -> wasmValue

    # I64#inspect shows signed value
    def inspect: () -> untyped
  end

  class F32
    include ValueHelper

    attr_accessor value: Float

    # @rbs str: String
    # @rbs return: F32
    def self.from_bytes: (String str) -> F32

    # @rbs return: Integer
    def memsize: () -> Integer

    # @rbs return: :positive|:negative
    def sign: () -> (:positive | :negative)

    # @rbs size: Integer|nil
    # @rbs return: String
    def packed: (?size: Integer | nil) -> String

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def wrap: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_u: (to: Symbol) -> wasmValue

    # @todo need more testcase...
    # @see https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-trunc-s-mathrm-trunc-mathsf-s-m-n-z
    # @see copy this impl to F64 when changed
    # @rbs to: Symbol
    # @rbs saturating: bool
    # @rbs return: wasmValue
    def trunc_s: (to: Symbol, ?saturating: bool) -> wasmValue

    # @see https://webassembly.github.io/spec/core/exec/numerics.html#xref-exec-numerics-op-trunc-u-mathrm-trunc-mathsf-u-m-n-z
    # @see copy this impl to F64 when changed
    # @rbs to: Symbol
    # @rbs sturating: bool
    # @rbs return: wasmValue
    def trunc_u: (to: Symbol, ?saturating: untyped) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def demote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def promote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def reinterpret: (to: Symbol) -> wasmValue

    # @rbs from: Symbol
    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extendN_s: (from: Symbol, to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_s: (to: Symbol) -> wasmValue

    def inspect: () -> untyped
  end

  class F64
    include ValueHelper

    attr_accessor value: Float

    # @rbs str: String
    # @rbs return: F64
    def self.from_bytes: (String str) -> F64

    # @rbs return: Integer
    def memsize: () -> Integer

    # @rbs return: :positive|:negative
    def sign: () -> (:positive | :negative)

    # @rbs size: Integer|nil
    # @rbs return: String
    def packed: (?size: Integer | nil) -> String

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def wrap: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extend_u: (to: Symbol) -> wasmValue

    # @see the same as F32
    # @rbs to: Symbol
    # @rbs saturating: bool
    # @rbs return: wasmValue
    def trunc_s: (to: Symbol, ?saturating: bool) -> wasmValue

    # @see the same as F32
    # @rbs to: Symbol
    # @rbs saturating: bool
    # @rbs return: wasmValue
    def trunc_u: (to: Symbol, ?saturating: bool) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_s: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def convert_u: (to: Symbol) -> wasmValue

    # @todo no loss of digits...
    # @rbs to: Symbol
    # @rbs return: wasmValue
    def demote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def promote: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def reinterpret: (to: Symbol) -> wasmValue

    # @rbs from: Symbol
    # @rbs to: Symbol
    # @rbs return: wasmValue
    def extendN_s: (from: Symbol, to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_u: (to: Symbol) -> wasmValue

    # @rbs to: Symbol
    # @rbs return: wasmValue
    def trunc_sat_s: (to: Symbol) -> wasmValue

    def inspect: () -> untyped
  end
end

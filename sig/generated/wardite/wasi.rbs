# Generated from lib/wardite/wasi.rb with RBS::Inline

module Wardite
  class WasiSnapshotPreview1
    include ValueHelper

    include WasmModule

    attr_accessor fd_table: Hash[Integer, IO | File | ::Wardite::Wasi::PreopenedDir]

    attr_accessor fd_count: Integer

    attr_accessor argv: Array[String]

    attr_accessor mapdir: Hash[String, String]

    attr_accessor dirent_cache: Hash[Integer, ::Wardite::Wasi::DirentCache]

    # @rbs argv: Array[String]
    # @rbs mapdir: Hash[String, String]
    # @rbs return: void
    def initialize: (?argv: Array[String], ?mapdir: Hash[String, String]) -> void

    # @rbs file: IO|File|::Wardite::Wasi::PreopenedDir
    # @rbs return: Integer
    def set_fd: (IO | File | ::Wardite::Wasi::PreopenedDir file) -> Integer

    # @rbs path: String
    # @rbs guest_path: String
    # @rbs return: void
    def set_preopened_dir: (String path, String guest_path) -> void

    # @rbs orig_path: String
    # @rbs return: String
    def resolv_path: (String orig_path) -> String

    # @rbs atfd: Integer
    # @rbs target: String
    # @rbs return: String
    def get_path_at: (Integer atfd, String target) -> String

    # @rbs dirflags: Integer
    # @rbs oflags: Integer
    # @rbs fdflags: Integer
    # @rbs rights: Integer
    def interpret_open_flags: (Integer dirflags, Integer oflags, Integer fdflags, Integer rights) -> untyped

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def args_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def args_sizes_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def environ_sizes_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def environ_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def clock_time_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_create_directory: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_filestat_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_filestat_set_times: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_link: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_open: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_readlink: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_remove_directory: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_rename: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_symlink: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def path_unlink_file: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_prestat_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_prestat_dir_name: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_write: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_read: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_fdstat_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_filestat_get: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_readdir: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    def fd_tell: (Store store, Array[wasmValue] args) -> untyped

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def fd_close: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def proc_exit: (Store store, Array[wasmValue] args) -> Object

    # @rbs store: Store
    # @rbs args: Array[wasmValue]
    # @rbs return: Object
    def random_get: (Store store, Array[wasmValue] args) -> Object

    private

    # @rbs buf: String|nil
    # @rbs return: Integer
    def unpack_le_int: (String | nil buf) -> Integer
  end
end
